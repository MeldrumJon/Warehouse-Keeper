const MULTIPLIER = 6364136223846793005n;
const INCREMENT = 1442695040888963407n;

function rotr32(x, r) {
    let result = (x >> r) | (x << BigInt.asUintN(5, -r));
    return Number(BigInt.asUintN(32, result));
}

export default class PCG32 {
    constructor(seed) {
        this.state = BigInt.asUintN(64, BigInt(seed) + INCREMENT);
        this.rand();
    }

    rand() {
        let x = this.state;
        let count = BigInt.asUintN(5, x >> 59n);

        this.state = BigInt.asUintN(64, x * MULTIPLIER + INCREMENT);
        x ^= (x >> 18n);
        return rotr32(BigInt.asUintN(32, x >> 27n), count);
    }
}

export function test() {
    const S1 = 8n;
    const S2 = 1575521731n;
    const TEST_RESULTS1 = [1658943282, 3425254359, 1380307894, 1328007988, 4158839755, 996917922, 1059395759, 1619469466, 2387944686, 2078198753, 729418002, 2114569366, 2448052962, 2858705861, 2264660540, 1411572366, 2507965498, 2212423009, 2766702618, 3546864168, 2795676596, 1498256230, 1469997179, 2946197312, 2086927441, 1330360941, 1996677480, 2584459904, 574046057, 3067765989, 165200005, 2074924316, 290950573, 401398408, 2210524499, 2415255702, 1753007588, 2735133942, 43360867, 3301468771, 1169962358, 1418502334, 2187410612, 1049864419, 31581888, 1218123170, 1409268087, 1645124033, 574824287, 707522030, 2307852704, 3849562108, 2788254917, 1840952770, 3014077600, 4095904401, 1235246191, 399513533, 924174779, 3254773708, 136428479, 978660810, 1753342484, 19370500, 419437983, 3406844573, 3376706632, 603933967, 425109364, 1469613833, 2786674810, 3204011459, 37168405, 56432964, 3263744502, 2262783153, 1358344674, 2010935177, 1749234035, 1774177844, 2145190121, 128905897, 1622480665, 3335684219, 2559859399, 3676976475, 1234921169, 3269031490, 3705749295, 2663848439, 95856581, 496078347, 1719854305, 734865744, 3799826893, 3628267594, 3570487396, 919542345, 3645522703, 3815322595];
    const TEST_RESULTS2 = [1832538307, 500654864, 1568454990, 1029951997, 255949544, 1243613246, 2389282420, 4097497181, 701898932, 3489476718, 850003454, 320883821, 3178158812, 3489914197, 2570189944, 727085513, 2358525656, 3924631574, 2640990592, 521025230, 1387874909, 318477826, 4218213619, 547215090, 3947943556, 2066772876, 3800463303, 581851814, 3780724051, 3413086202, 2810207662, 1580703235, 2113785162, 1451612122, 100272638, 3455250340, 2426540000, 2499804280, 3157590972, 2252048479, 1055971460, 4055704818, 2323616701, 612108334, 2580403114, 4206257878, 3575107371, 125110652, 1315952313, 856684008, 4152687391, 3369664240, 401462150, 1790916939, 265090108, 920108610, 2999577305, 582486053, 4072605545, 162257102, 2287544258, 1078152667, 2987161196, 2481372931, 4159356731, 2339279418, 1353713240, 2210865027, 763554310, 3682138894, 3388753650, 3387126361, 1157366084, 1969921721, 1932437124, 2533724775, 2075622783, 2835119951, 3925077646, 3725379228, 565172180, 914547212, 1822619749, 329035982, 1140810578, 2698011506, 1134493179, 1368458082, 1369632472, 1429827732, 2310055431, 1148156314, 3114031369, 206786096, 2010852810, 1014452781, 2132734122, 2918552726, 424575003, 3706847894];

    let rng;
    rng = new PCG32(S1);
    let results1 = [];
    for (let i = 0; i < 100; ++i) {
        results1[i] = rng.rand();
    }

    console.assert(results1.length === TEST_RESULTS1.length);
    for (let i = 0; i < TEST_RESULTS1.length; ++i) {
        console.assert(TEST_RESULTS1[i] === results1[i]);
    }

    rng = new PCG32(S2);
    let results2 = [];
    for (let i = 0; i < 100; ++i) {
        results2[i] = rng.rand();
    }

    console.assert(results2.length === TEST_RESULTS2.length);
    for (let i = 0; i < TEST_RESULTS2.length; ++i) {
        console.assert(TEST_RESULTS2[i] === results2[i]);
    }
}
